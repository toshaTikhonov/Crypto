#ifndef __PRNG_H__
#define __PRNG_H__

#ifdef __cplusplus
extern "C" {
#endif

#include "crt.h"
#include "Crypto.urc"


URC Prng_Init(void);
/*
    Let ede*X(Y) represent the AES encryption of Y under the key *X.
    For AES 128-bit key, let *K be a 128 bit key.

    This *K is reserved only for the generation of pseudo random numbers.

    Let V be a 128-bit seed value which is also kept secret, and XOR be the exclusive-or operator.
    Let DT be a date/time vector which is updated on each iteration.
    I is a intermediate value.
    A vector R is generated as follows (Note for AES implementations DT, I, and R are 128-bits each.):
    I = ede *K(DT)
    R = ede *K(I XOR V) and a new V is generated by V = ede*K(R Xor I).
*/
URC Prng_GetRandom(PUINT8 pBuffer, UINT16 BufferSize);

#ifdef __cplusplus
}
#endif

#endif /* __PRNG_H__ */
